// resourceHandler represents all server handlers.
type resourceHandler[T goservectx.Principal] interface {
{{range .}}{{.SummaryAsComment }}
// ({{.Method}} {{.Path}})
{{.OperationId}}(ctx *goservectx.Request[T])
{{end}}
}


{{range .}}{{$entry := .}}
{{$opid := $entry.OperationId}}
{{/* Generate ClientRequest struct ONCE per operation */}}
{{if .TypeDefinitions}}
// {{$opid}}ClientRequest combines all parameters for {{$opid}}
type {{$opid}}ClientRequest struct {
   {{/* Path Parameters */}}
    {{range .PathParams}}
    // {{.ParamName}} - Path parameter
    {{$def := .}}
    {{.GoName}} {{$def.TypeDef}} `name:"{{.ParamName}}" error_message:"required path param [{{.ParamName}}]" path:"{{$def.ParamName}}"{{if $def.Required}} required:"true" validate:"required"{{end}} json:"{{.ParamName}}"`
    {{end}}

    {{/* Query Parameters */}}
    {{range .QueryParams}}
    // {{.ParamName}} - Query parameter
    {{.GoName}} {{.TypeDef}} `name:"{{.ParamName}}" error_message:"required query param [{{.ParamName}}]" query:"{{.ParamName}}"{{if .Required}} required:"true" validate:"required"{{end}} json:"{{.ParamName}}"`
    {{end}}

    {{/* Header Parameters */}}
    {{range .HeaderParams}}
    // {{.ParamName}} - Header parameter
    {{.GoName}} {{.TypeDef}} `name:"{{.ParamName}}"  error_message:"required header param [{{.ParamName}}] " header:"{{.ParamName}}"{{if .Required}} required:"true" validate:"required"{{end}} json:"{{.ParamName}}"`
    {{end}}
    {{/* Take the first TypeDefinition (assuming one per operation) */}}
    {{ $processed := false -}}
    {{range .Bodies}}
    {{if and (not $processed) .IsSupported -}}
    {{$contentType := .ContentType -}}
    Body {{.Schema.TypeDecl}} `name:"body" json:"body"{{if .Required }} required:"true" validate:"required"{{end}}`
    {{ $processed = true -}}
    {{end}}
    {{end}}
}
{{end}}

{{if not .TypeDefinitions}}
type {{$entry.OperationId}}ClientRequest struct { {{ $processed := false -}}
    {{range .Bodies}}
    {{if and (not $processed) .IsSupported -}}
    {{$contentType := .ContentType -}}
     Body {{.Schema.TypeDecl}} `name:"body" json:"body"{{if .Required }} required:"true" validate:"required"{{end}}`
    {{ $processed = true -}}
    {{end}}
    {{end}}
}
{{end}}
{{end}}

type ApiRequestService[T goservectx.Principal] interface {
{{range .}}{{$entry := .}}
    {{ $method := .Method }}
    {{ $path := .Path | swaggerUriToGorillaUri }}
    {{- $scopes := "" -}}
    {{- range .SecurityDefinitions -}}
        {{- range .Scopes -}}
            {{- if $scopes -}}
                {{- $scopes = printf "%s,\"%s\"" $scopes . -}}
            {{- else -}}
                {{- $scopes = printf "\"%s\"" . -}}
            {{- end -}}
        {{- end -}}
    {{- end -}}

    {{$hasScopes := gt (len $scopes) 0}}
    {{$hasParams := or .PathParams .QueryParams .HeaderParams}}
    {{$hasBody := gt (len .Bodies) 0}}
    {{$opid := $entry.OperationId}}
    {{ $processed := false -}}
    {{range .Bodies}}
    {{if and .IsSupported (not $processed) -}}
    {{$contentType := .ContentType -}}
        // {{$opid}} -> {{ $method }}: {{ $path }} {{if $hasScopes}} required scopes [{{$scopes}}]{{end}}
        {{$opid}}(request {{$entry.OperationId}}ClientRequest, ctx *goservectx.Request[T])
        {{ $processed = true -}}
    {{end}}
    {{end}}
    {{if not $processed}}
    {{if or $hasParams }}
    // {{$opid}} -> {{ $method }}: {{ $path }} {{if $hasScopes}} required scopes [{{$scopes}}]{{end}}
    {{$opid}}(request {{$entry.OperationId}}ClientRequest, ctx *goservectx.Request[T])
    {{ else }}
     // {{$opid}} -> {{ $method }}: {{ $path }} {{if $hasScopes}} required scopes [{{$scopes}}]{{end}}
    {{$opid}}(ctx *goservectx.Request[T])
    {{end}}
    {{end}}
{{end}}
}

type resourceHandlerImpl[T goservectx.Principal] struct {
    Service ApiRequestService[T]
}

