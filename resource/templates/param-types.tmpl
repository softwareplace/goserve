{{range .}}{{$opid := .OperationId}}
{{range .TypeDefinitions}}
// {{.TypeName}} defines parameters for {{$opid}}.
type {{.TypeName}} {{if .IsAlias}}={{end}} {{.Schema.TypeDecl}}
{{end}}
{{end}}

{{range .}}{{$entry := .}}
{{$opid := $entry.OperationId}}
func (rh *resourceHandlerImpl[T]){{$opid}}(ctx *goservectx.Request[T]) {
    {{$opid := .OperationId}}
    {{ $processed := false -}}
    {{$hasParams := or .PathParams .QueryParams .HeaderParams}}
    {{$hasBody := gt (len .Bodies) 0}}
    {{range .Bodies}}
    {{if and (not $processed) .IsSupported -}}
    {{$contentType := .ContentType -}}
        goserveerror.Handler(func() {
            requestBody := {{.Schema.TypeDecl}}{}
            request.GetRequestBody(ctx, requestBody, func(ctx *goservectx.Request[T], body {{.Schema.TypeDecl}}) {
            clientRequest := {{$entry.OperationId}}ClientRequest{
                                    Body: body,
                                }
            {{if or $hasParams }}err := request.BindRequestParams(ctx.Request, &clientRequest)
                contentType := ctx.Request.Header.Get(goservectx.ContentType)
                // Try to load form param to the body struct. File form will be ignored.
                if err == nil && strings.Contains(contentType, goservectx.MultipartFormData) {
                    _ = goservereflect.ParamsExtract(&clientRequest.Body,
                        goservereflect.ParamsExtractorSource{
                            Tree: request.FormValues(ctx.Request),
                        },
                    )
                }
                if err != nil {
                    log.Errorf("Failed to bind {{$entry.OperationId}}ClientRequest request params: %+v", err)
                    ctx.Error(err.Error(), err.Code)
                    return
                }
            {{ end }}
            rh.Service.{{$entry.OperationId}}(clientRequest, ctx)
            }, func(ctx *goservectx.Request[T], err error) {
            log.Errorf("Failed to bind {{$entry.OperationId}}ClientRequest request params: %+v", err)
            if err != nil && strings.Contains(err.Error(), "validation") {
                ctx.BadRequest(err.Error())
                return
            }
            ctx.BadRequest(fmt.Sprintf("Failed to process the request: %+v", err))
            })
        }, func(err error) {
            log.Errorf("[{{$entry.Method}} {{$entry.Path}}]:: {{$opid}} result with error: %+v", err)
            if err != nil && strings.Contains(err.Error(), "validation") {
                ctx.BadRequest(err.Error())
                return
            }
            ctx.BadRequest(fmt.Sprintf("Failed to process the request: %+v", err))
        })
        {{ $processed = true -}}
        {{end}}
        {{end}}
        {{if not $processed -}}
        goserveerror.Handler(func() {
            {{if or $hasParams }}
            clientRequest := {{$entry.OperationId}}ClientRequest{
            }
            err := request.BindRequestParams(ctx.Request, &clientRequest)
                if err != nil {
                    log.Errorf("Failed to bind {{$entry.OperationId}}ClientRequest request params: %+v", err)
                    ctx.Error(err.Error(), err.Code)
                    return
                }
                rh.Service.{{$entry.OperationId}}(clientRequest, ctx)
                {{ else }}
                rh.Service.{{$entry.OperationId}}(ctx)
            {{ end }}

        }, func(err error) {
            log.Errorf("[{{.Method}} {{.Path}}]:: {{$opid}} result with error: %+v", err)
            if err != nil && strings.Contains(err.Error(), "validation") {
                ctx.BadRequest(err.Error())
                return
            }
            ctx.BadRequest(fmt.Sprintf("Failed to process the request: %+v", err))
        })
        {{end}}
        }
{{end}}
