// Package gen provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package gen

import (
	"time"

	log "github.com/sirupsen/logrus"
	apicontext "github.com/softwareplace/goserve/context"
	errorhandler "github.com/softwareplace/goserve/error"
	"github.com/softwareplace/goserve/request"
	"github.com/softwareplace/goserve/server"
)

const (
	Api_keyScopes       = "api_key.Scopes"
	Petstore_authScopes = "petstore_auth.Scopes"
)

// Defines values for OrderStatus.
const (
	Approved  OrderStatus = "approved"
	Delivered OrderStatus = "delivered"
	Placed    OrderStatus = "placed"
)

// Defines values for PetStatus.
const (
	PetStatusAvailable PetStatus = "available"
	PetStatusPending   PetStatus = "pending"
	PetStatusSold      PetStatus = "sold"
)

// Defines values for FindPetsByStatusParamsStatus.
const (
	FindPetsByStatusParamsStatusAvailable FindPetsByStatusParamsStatus = "available"
	FindPetsByStatusParamsStatusPending   FindPetsByStatusParamsStatus = "pending"
	FindPetsByStatusParamsStatusSold      FindPetsByStatusParamsStatus = "sold"
)

// ApiResponse defines model for ApiResponse.
type ApiResponse struct {
	Code    *int32  `json:"code,omitempty"`
	Message *string `json:"message,omitempty"`
	Type    *string `json:"type,omitempty"`
}

// BaseResponse defines model for BaseResponse.
type BaseResponse struct {
	Code      *int    `json:"code,omitempty"`
	Message   *string `json:"message,omitempty"`
	Success   *bool   `json:"success,omitempty"`
	Timestamp *int    `json:"timestamp,omitempty"`
}

// Category defines model for Category.
type Category struct {
	Id   *int64  `json:"id,omitempty"`
	Name *string `json:"name,omitempty"`
}

// LoginRequest defines model for LoginRequest.
type LoginRequest struct {
	Password string `json:"password"`
	Username string `json:"username"`
}

// LoginResponse defines model for LoginResponse.
type LoginResponse struct {
	Expires *int    `json:"expires,omitempty"`
	Token   *string `json:"token,omitempty"`
}

// Order defines model for Order.
type Order struct {
	Complete *bool      `json:"complete,omitempty"`
	Id       *int64     `json:"id,omitempty"`
	PetId    *int64     `json:"petId,omitempty"`
	Quantity *int32     `json:"quantity,omitempty"`
	ShipDate *time.Time `json:"shipDate,omitempty"`

	// Status Order Status
	Status *OrderStatus `json:"status,omitempty"`
}

// OrderStatus Order Status
type OrderStatus string

// Pet defines model for Pet.
type Pet struct {
	Category  *Category `json:"category,omitempty"`
	Id        *int64    `json:"id,omitempty"`
	Name      string    `json:"name"`
	PhotoUrls []string  `json:"photoUrls"`

	// Status pet status in the store
	Status *PetStatus `json:"status,omitempty"`
	Tags   *[]Tag     `json:"tags,omitempty"`
}

// PetStatus pet status in the store
type PetStatus string

// Tag defines model for Tag.
type Tag struct {
	Id   *int64  `json:"id,omitempty"`
	Name *string `json:"name,omitempty"`
}

// User defines model for User.
type User struct {
	Email     *string `json:"email,omitempty"`
	FirstName *string `json:"firstName,omitempty"`
	Id        *int64  `json:"id,omitempty"`
	LastName  *string `json:"lastName,omitempty"`
	Password  *string `json:"password,omitempty"`
	Phone     *string `json:"phone,omitempty"`

	// UserStatus User Status
	UserStatus *int32  `json:"userStatus,omitempty"`
	Username   *string `json:"username,omitempty"`
}

// Authorization defines model for authorization.
type Authorization = string

// PostLoginParams defines parameters for PostLogin.
type PostLoginParams struct {
	XApiKey *string `json:"X-Api-Key,omitempty"`
}

// FindAllPetsParams defines parameters for FindAllPets.
type FindAllPetsParams struct {
	// Authorization jwt
	Authorization Authorization `json:"Authorization"`
}

// AddPetParams defines parameters for AddPet.
type AddPetParams struct {
	// Authorization jwt
	Authorization Authorization `json:"Authorization"`
}

// FindPetsByStatusParams defines parameters for FindPetsByStatus.
type FindPetsByStatusParams struct {
	// Status Status values that need to be considered for filter
	Status []FindPetsByStatusParamsStatus `form:"status" json:"status"`

	// Authorization jwt
	Authorization Authorization `json:"Authorization"`
}

// FindPetsByStatusParamsStatus defines parameters for FindPetsByStatus.
type FindPetsByStatusParamsStatus string

// FindPetsByTagsParams defines parameters for FindPetsByTags.
type FindPetsByTagsParams struct {
	// Tags Tags to filter by
	Tags *[]string `form:"tags,omitempty" json:"tags,omitempty"`

	// Authorization jwt
	Authorization Authorization `json:"Authorization"`
}

// DeletePetParams defines parameters for DeletePet.
type DeletePetParams struct {
	// Authorization jwt
	Authorization Authorization `json:"Authorization"`
	ApiKey        *string       `json:"api_key,omitempty"`
}

// GetPetByIdParams defines parameters for GetPetById.
type GetPetByIdParams struct {
	// Authorization jwt
	Authorization Authorization `json:"Authorization"`
}

// UpdatePetWithFormParams defines parameters for UpdatePetWithForm.
type UpdatePetWithFormParams struct {
	// Name Name of pet that needs to be updated
	Name *string `form:"name,omitempty" json:"name,omitempty"`

	// Status Status of pet that needs to be updated
	Status *string `form:"status,omitempty" json:"status,omitempty"`

	// Authorization jwt
	Authorization Authorization `json:"Authorization"`
}

// UpdatePetParams defines parameters for UpdatePet.
type UpdatePetParams struct {
	// Authorization jwt
	Authorization Authorization `json:"Authorization"`
}

// UploadFileParams defines parameters for UploadFile.
type UploadFileParams struct {
	// AdditionalMetadata Additional Metadata
	AdditionalMetadata *string `form:"additionalMetadata,omitempty" json:"additionalMetadata,omitempty"`

	// Authorization jwt
	Authorization Authorization `json:"Authorization"`
}

// PlaceOrderParams defines parameters for PlaceOrder.
type PlaceOrderParams struct {
	// Authorization jwt
	Authorization Authorization `json:"Authorization"`
}

// DeleteOrderParams defines parameters for DeleteOrder.
type DeleteOrderParams struct {
	// Authorization jwt
	Authorization Authorization `json:"Authorization"`
}

// GetOrderByIdParams defines parameters for GetOrderById.
type GetOrderByIdParams struct {
	// Authorization jwt
	Authorization Authorization `json:"Authorization"`
}

// CreateUsersWithListInputJSONBody defines parameters for CreateUsersWithListInput.
type CreateUsersWithListInputJSONBody = []User

// CreateUsersWithListInputParams defines parameters for CreateUsersWithListInput.
type CreateUsersWithListInputParams struct {
	// Authorization jwt
	Authorization Authorization `json:"Authorization"`
}

// LogoutUserParams defines parameters for LogoutUser.
type LogoutUserParams struct {
	// Authorization jwt
	Authorization Authorization `json:"Authorization"`
}

// DeleteUserParams defines parameters for DeleteUser.
type DeleteUserParams struct {
	// Authorization jwt
	Authorization Authorization `json:"Authorization"`
}

// GetUserByNameParams defines parameters for GetUserByName.
type GetUserByNameParams struct {
	// Authorization jwt
	Authorization Authorization `json:"Authorization"`
}

// UpdateUserParams defines parameters for UpdateUser.
type UpdateUserParams struct {
	// Authorization jwt
	Authorization Authorization `json:"Authorization"`
}

func (rh *resourceHandlerImpl[T]) PostLogin(ctx *apicontext.Request[T]) {

	errorhandler.Handler(func() {
		requestBody := LoginRequest{}
		request.GetRequestBody(ctx, requestBody, func(ctx *apicontext.Request[T], body LoginRequest) {
			clientRequest := PostLoginClientRequest{
				Body: body,
			}
			err := ctx.BindRequestParams(&clientRequest)
			if err != nil {
				log.Errorf("Failed to bind PostLoginClientRequest request params: %+v", err)
				ctx.InternalServerError(err.Error())
				return
			}

			rh.Service.PostLogin(clientRequest, ctx)
		}, func(ctx *apicontext.Request[T], err error) {
			ctx.InternalServerError("Internal server error")
		})
	}, func(err error) {
		log.Errorf("[POST /login]:: PostLogin result with error: %+v", err)
		ctx.InternalServerError("Internal server error")
	})

}

func (rh *resourceHandlerImpl[T]) FindAllPets(ctx *apicontext.Request[T]) {

	errorhandler.Handler(func() {

		clientRequest := FindAllPetsClientRequest{}
		err := ctx.BindRequestParams(&clientRequest)
		if err != nil {
			log.Errorf("Failed to bind FindAllPetsClientRequest request params: %+v", err)
			ctx.InternalServerError(err.Error())
			return
		}
		rh.Service.FindAllPets(clientRequest, ctx)

	}, func(err error) {
		log.Errorf("[GET /pet]:: FindAllPets result with error: %+v", err)
		ctx.InternalServerError("Internal server error")
	})

}

func (rh *resourceHandlerImpl[T]) AddPet(ctx *apicontext.Request[T]) {

	errorhandler.Handler(func() {
		requestBody := Pet{}
		request.GetRequestBody(ctx, requestBody, func(ctx *apicontext.Request[T], body Pet) {
			clientRequest := AddPetClientRequest{
				Body: body,
			}
			err := ctx.BindRequestParams(&clientRequest)
			if err != nil {
				log.Errorf("Failed to bind AddPetClientRequest request params: %+v", err)
				ctx.InternalServerError(err.Error())
				return
			}

			rh.Service.AddPet(clientRequest, ctx)
		}, func(ctx *apicontext.Request[T], err error) {
			ctx.InternalServerError("Internal server error")
		})
	}, func(err error) {
		log.Errorf("[POST /pet]:: AddPet result with error: %+v", err)
		ctx.InternalServerError("Internal server error")
	})

}

func (rh *resourceHandlerImpl[T]) FindPetsByStatus(ctx *apicontext.Request[T]) {

	errorhandler.Handler(func() {

		clientRequest := FindPetsByStatusClientRequest{}
		err := ctx.BindRequestParams(&clientRequest)
		if err != nil {
			log.Errorf("Failed to bind FindPetsByStatusClientRequest request params: %+v", err)
			ctx.InternalServerError(err.Error())
			return
		}
		rh.Service.FindPetsByStatus(clientRequest, ctx)

	}, func(err error) {
		log.Errorf("[GET /pet/findByStatus]:: FindPetsByStatus result with error: %+v", err)
		ctx.InternalServerError("Internal server error")
	})

}

func (rh *resourceHandlerImpl[T]) FindPetsByTags(ctx *apicontext.Request[T]) {

	errorhandler.Handler(func() {

		clientRequest := FindPetsByTagsClientRequest{}
		err := ctx.BindRequestParams(&clientRequest)
		if err != nil {
			log.Errorf("Failed to bind FindPetsByTagsClientRequest request params: %+v", err)
			ctx.InternalServerError(err.Error())
			return
		}
		rh.Service.FindPetsByTags(clientRequest, ctx)

	}, func(err error) {
		log.Errorf("[GET /pet/findByTags]:: FindPetsByTags result with error: %+v", err)
		ctx.InternalServerError("Internal server error")
	})

}

func (rh *resourceHandlerImpl[T]) DeletePet(ctx *apicontext.Request[T]) {

	errorhandler.Handler(func() {

		clientRequest := DeletePetClientRequest{}
		err := ctx.BindRequestParams(&clientRequest)
		if err != nil {
			log.Errorf("Failed to bind DeletePetClientRequest request params: %+v", err)
			ctx.InternalServerError(err.Error())
			return
		}
		rh.Service.DeletePet(clientRequest, ctx)

	}, func(err error) {
		log.Errorf("[DELETE /pet/{petId}]:: DeletePet result with error: %+v", err)
		ctx.InternalServerError("Internal server error")
	})

}

func (rh *resourceHandlerImpl[T]) GetPetById(ctx *apicontext.Request[T]) {

	errorhandler.Handler(func() {

		clientRequest := GetPetByIdClientRequest{}
		err := ctx.BindRequestParams(&clientRequest)
		if err != nil {
			log.Errorf("Failed to bind GetPetByIdClientRequest request params: %+v", err)
			ctx.InternalServerError(err.Error())
			return
		}
		rh.Service.GetPetById(clientRequest, ctx)

	}, func(err error) {
		log.Errorf("[GET /pet/{petId}]:: GetPetById result with error: %+v", err)
		ctx.InternalServerError("Internal server error")
	})

}

func (rh *resourceHandlerImpl[T]) UpdatePetWithForm(ctx *apicontext.Request[T]) {

	errorhandler.Handler(func() {

		clientRequest := UpdatePetWithFormClientRequest{}
		err := ctx.BindRequestParams(&clientRequest)
		if err != nil {
			log.Errorf("Failed to bind UpdatePetWithFormClientRequest request params: %+v", err)
			ctx.InternalServerError(err.Error())
			return
		}
		rh.Service.UpdatePetWithForm(clientRequest, ctx)

	}, func(err error) {
		log.Errorf("[POST /pet/{petId}]:: UpdatePetWithForm result with error: %+v", err)
		ctx.InternalServerError("Internal server error")
	})

}

func (rh *resourceHandlerImpl[T]) UpdatePet(ctx *apicontext.Request[T]) {

	errorhandler.Handler(func() {
		requestBody := Pet{}
		request.GetRequestBody(ctx, requestBody, func(ctx *apicontext.Request[T], body Pet) {
			clientRequest := UpdatePetClientRequest{
				Body: body,
			}
			err := ctx.BindRequestParams(&clientRequest)
			if err != nil {
				log.Errorf("Failed to bind UpdatePetClientRequest request params: %+v", err)
				ctx.InternalServerError(err.Error())
				return
			}

			rh.Service.UpdatePet(clientRequest, ctx)
		}, func(ctx *apicontext.Request[T], err error) {
			ctx.InternalServerError("Internal server error")
		})
	}, func(err error) {
		log.Errorf("[PUT /pet/{petId}]:: UpdatePet result with error: %+v", err)
		ctx.InternalServerError("Internal server error")
	})

}

func (rh *resourceHandlerImpl[T]) UploadFile(ctx *apicontext.Request[T]) {

	errorhandler.Handler(func() {

		clientRequest := UploadFileClientRequest{}
		err := ctx.BindRequestParams(&clientRequest)
		if err != nil {
			log.Errorf("Failed to bind UploadFileClientRequest request params: %+v", err)
			ctx.InternalServerError(err.Error())
			return
		}
		rh.Service.UploadFile(clientRequest, ctx)

	}, func(err error) {
		log.Errorf("[POST /pet/{petId}/uploadImage]:: UploadFile result with error: %+v", err)
		ctx.InternalServerError("Internal server error")
	})

}

func (rh *resourceHandlerImpl[T]) GetInventory(ctx *apicontext.Request[T]) {

	errorhandler.Handler(func() {

		rh.Service.GetInventory(ctx)

	}, func(err error) {
		log.Errorf("[GET /store/inventory]:: GetInventory result with error: %+v", err)
		ctx.InternalServerError("Internal server error")
	})

}

func (rh *resourceHandlerImpl[T]) PlaceOrder(ctx *apicontext.Request[T]) {

	errorhandler.Handler(func() {
		requestBody := Order{}
		request.GetRequestBody(ctx, requestBody, func(ctx *apicontext.Request[T], body Order) {
			clientRequest := PlaceOrderClientRequest{
				Body: body,
			}
			err := ctx.BindRequestParams(&clientRequest)
			if err != nil {
				log.Errorf("Failed to bind PlaceOrderClientRequest request params: %+v", err)
				ctx.InternalServerError(err.Error())
				return
			}

			rh.Service.PlaceOrder(clientRequest, ctx)
		}, func(ctx *apicontext.Request[T], err error) {
			ctx.InternalServerError("Internal server error")
		})
	}, func(err error) {
		log.Errorf("[POST /store/order]:: PlaceOrder result with error: %+v", err)
		ctx.InternalServerError("Internal server error")
	})

}

func (rh *resourceHandlerImpl[T]) DeleteOrder(ctx *apicontext.Request[T]) {

	errorhandler.Handler(func() {

		clientRequest := DeleteOrderClientRequest{}
		err := ctx.BindRequestParams(&clientRequest)
		if err != nil {
			log.Errorf("Failed to bind DeleteOrderClientRequest request params: %+v", err)
			ctx.InternalServerError(err.Error())
			return
		}
		rh.Service.DeleteOrder(clientRequest, ctx)

	}, func(err error) {
		log.Errorf("[DELETE /store/order/{orderId}]:: DeleteOrder result with error: %+v", err)
		ctx.InternalServerError("Internal server error")
	})

}

func (rh *resourceHandlerImpl[T]) GetOrderById(ctx *apicontext.Request[T]) {

	errorhandler.Handler(func() {

		clientRequest := GetOrderByIdClientRequest{}
		err := ctx.BindRequestParams(&clientRequest)
		if err != nil {
			log.Errorf("Failed to bind GetOrderByIdClientRequest request params: %+v", err)
			ctx.InternalServerError(err.Error())
			return
		}
		rh.Service.GetOrderById(clientRequest, ctx)

	}, func(err error) {
		log.Errorf("[GET /store/order/{orderId}]:: GetOrderById result with error: %+v", err)
		ctx.InternalServerError("Internal server error")
	})

}

func (rh *resourceHandlerImpl[T]) CreateUser(ctx *apicontext.Request[T]) {

	errorhandler.Handler(func() {
		requestBody := User{}
		request.GetRequestBody(ctx, requestBody, func(ctx *apicontext.Request[T], body User) {
			clientRequest := CreateUserClientRequest{
				Body: body,
			}

			rh.Service.CreateUser(clientRequest, ctx)
		}, func(ctx *apicontext.Request[T], err error) {
			ctx.InternalServerError("Internal server error")
		})
	}, func(err error) {
		log.Errorf("[POST /user]:: CreateUser result with error: %+v", err)
		ctx.InternalServerError("Internal server error")
	})

}

func (rh *resourceHandlerImpl[T]) CreateUsersWithListInput(ctx *apicontext.Request[T]) {

	errorhandler.Handler(func() {
		requestBody := CreateUsersWithListInputJSONBody{}
		request.GetRequestBody(ctx, requestBody, func(ctx *apicontext.Request[T], body CreateUsersWithListInputJSONBody) {
			clientRequest := CreateUsersWithListInputClientRequest{
				Body: body,
			}
			err := ctx.BindRequestParams(&clientRequest)
			if err != nil {
				log.Errorf("Failed to bind CreateUsersWithListInputClientRequest request params: %+v", err)
				ctx.InternalServerError(err.Error())
				return
			}

			rh.Service.CreateUsersWithListInput(clientRequest, ctx)
		}, func(ctx *apicontext.Request[T], err error) {
			ctx.InternalServerError("Internal server error")
		})
	}, func(err error) {
		log.Errorf("[POST /user/createWithList]:: CreateUsersWithListInput result with error: %+v", err)
		ctx.InternalServerError("Internal server error")
	})

}

func (rh *resourceHandlerImpl[T]) LogoutUser(ctx *apicontext.Request[T]) {

	errorhandler.Handler(func() {

		clientRequest := LogoutUserClientRequest{}
		err := ctx.BindRequestParams(&clientRequest)
		if err != nil {
			log.Errorf("Failed to bind LogoutUserClientRequest request params: %+v", err)
			ctx.InternalServerError(err.Error())
			return
		}
		rh.Service.LogoutUser(clientRequest, ctx)

	}, func(err error) {
		log.Errorf("[GET /user/logout]:: LogoutUser result with error: %+v", err)
		ctx.InternalServerError("Internal server error")
	})

}

func (rh *resourceHandlerImpl[T]) DeleteUser(ctx *apicontext.Request[T]) {

	errorhandler.Handler(func() {

		clientRequest := DeleteUserClientRequest{}
		err := ctx.BindRequestParams(&clientRequest)
		if err != nil {
			log.Errorf("Failed to bind DeleteUserClientRequest request params: %+v", err)
			ctx.InternalServerError(err.Error())
			return
		}
		rh.Service.DeleteUser(clientRequest, ctx)

	}, func(err error) {
		log.Errorf("[DELETE /user/{username}]:: DeleteUser result with error: %+v", err)
		ctx.InternalServerError("Internal server error")
	})

}

func (rh *resourceHandlerImpl[T]) GetUserByName(ctx *apicontext.Request[T]) {

	errorhandler.Handler(func() {

		clientRequest := GetUserByNameClientRequest{}
		err := ctx.BindRequestParams(&clientRequest)
		if err != nil {
			log.Errorf("Failed to bind GetUserByNameClientRequest request params: %+v", err)
			ctx.InternalServerError(err.Error())
			return
		}
		rh.Service.GetUserByName(clientRequest, ctx)

	}, func(err error) {
		log.Errorf("[GET /user/{username}]:: GetUserByName result with error: %+v", err)
		ctx.InternalServerError("Internal server error")
	})

}

func (rh *resourceHandlerImpl[T]) UpdateUser(ctx *apicontext.Request[T]) {

	errorhandler.Handler(func() {
		requestBody := User{}
		request.GetRequestBody(ctx, requestBody, func(ctx *apicontext.Request[T], body User) {
			clientRequest := UpdateUserClientRequest{
				Body: body,
			}
			err := ctx.BindRequestParams(&clientRequest)
			if err != nil {
				log.Errorf("Failed to bind UpdateUserClientRequest request params: %+v", err)
				ctx.InternalServerError(err.Error())
				return
			}

			rh.Service.UpdateUser(clientRequest, ctx)
		}, func(ctx *apicontext.Request[T], err error) {
			ctx.InternalServerError("Internal server error")
		})
	}, func(err error) {
		log.Errorf("[PUT /user/{username}]:: UpdateUser result with error: %+v", err)
		ctx.InternalServerError("Internal server error")
	})

}

// PostLoginJSONRequestBody defines body for PostLogin for application/json ContentType.
type PostLoginRequest = LoginRequest

// AddPetJSONRequestBody defines body for AddPet for application/json ContentType.
type AddPetRequest = Pet

// UpdatePetJSONRequestBody defines body for UpdatePet for application/json ContentType.
type UpdatePetRequest = Pet

// PlaceOrderJSONRequestBody defines body for PlaceOrder for application/json ContentType.
type PlaceOrderRequest = Order

// CreateUserJSONRequestBody defines body for CreateUser for application/json ContentType.
type CreateUserRequest = User

// CreateUsersWithListInputJSONRequestBody defines body for CreateUsersWithListInput for application/json ContentType.
type CreateUsersWithListInputRequest = CreateUsersWithListInputJSONBody

// UpdateUserJSONRequestBody defines body for UpdateUser for application/json ContentType.
type UpdateUserRequest = User

// resourceHandler represents all server handlers.
type resourceHandler[T apicontext.Principal] interface {
	// Authentication endpoint
	// (POST /login)
	PostLogin(ctx *apicontext.Request[T])
	// Finds Pets by status
	// (GET /pet)
	FindAllPets(ctx *apicontext.Request[T])
	// Add a new pet to the store
	// (POST /pet)
	AddPet(ctx *apicontext.Request[T])
	// Finds Pets by status
	// (GET /pet/findByStatus)
	FindPetsByStatus(ctx *apicontext.Request[T])
	// Finds Pets by tags
	// (GET /pet/findByTags)
	FindPetsByTags(ctx *apicontext.Request[T])
	// Deletes a pet
	// (DELETE /pet/{petId})
	DeletePet(ctx *apicontext.Request[T])
	// Find pet by ID
	// (GET /pet/{petId})
	GetPetById(ctx *apicontext.Request[T])
	// Updates a pet in the store with form data
	// (POST /pet/{petId})
	UpdatePetWithForm(ctx *apicontext.Request[T])
	// Update an existing pet
	// (PUT /pet/{petId})
	UpdatePet(ctx *apicontext.Request[T])
	// uploads an image
	// (POST /pet/{petId}/uploadImage)
	UploadFile(ctx *apicontext.Request[T])
	// Returns pet inventories by status
	// (GET /store/inventory)
	GetInventory(ctx *apicontext.Request[T])
	// Place an order for a pet
	// (POST /store/order)
	PlaceOrder(ctx *apicontext.Request[T])
	// Delete purchase order by ID
	// (DELETE /store/order/{orderId})
	DeleteOrder(ctx *apicontext.Request[T])
	// Find purchase order by ID
	// (GET /store/order/{orderId})
	GetOrderById(ctx *apicontext.Request[T])
	// Create user
	// (POST /user)
	CreateUser(ctx *apicontext.Request[T])
	// Creates list of users with given input array
	// (POST /user/createWithList)
	CreateUsersWithListInput(ctx *apicontext.Request[T])
	// Logs out current logged in user session
	// (GET /user/logout)
	LogoutUser(ctx *apicontext.Request[T])
	// Delete user
	// (DELETE /user/{username})
	DeleteUser(ctx *apicontext.Request[T])
	// Get user by user name
	// (GET /user/{username})
	GetUserByName(ctx *apicontext.Request[T])
	// Update user
	// (PUT /user/{username})
	UpdateUser(ctx *apicontext.Request[T])
}

// PostLoginClientRequest combines all parameters for PostLogin
type PostLoginClientRequest struct {

	// X-Api-Key - Header parameter
	XApiKey string `header:"X-Api-Key"`

	Body LoginRequest
}

// FindAllPetsClientRequest combines all parameters for FindAllPets
type FindAllPetsClientRequest struct {

	// Authorization - Header parameter
	Authorization Authorization `header:"Authorization" required:"true"`
}

// AddPetClientRequest combines all parameters for AddPet
type AddPetClientRequest struct {

	// Authorization - Header parameter
	Authorization Authorization `header:"Authorization" required:"true"`

	Body Pet
}

// FindPetsByStatusClientRequest combines all parameters for FindPetsByStatus
type FindPetsByStatusClientRequest struct {

	// status - Query parameter
	Status []FindPetsByStatusParamsStatus `query:"status" required:"true"`

	// Authorization - Header parameter
	Authorization Authorization `header:"Authorization" required:"true"`
}

// FindPetsByTagsClientRequest combines all parameters for FindPetsByTags
type FindPetsByTagsClientRequest struct {

	// tags - Query parameter
	Tags []string `query:"tags"`

	// Authorization - Header parameter
	Authorization Authorization `header:"Authorization" required:"true"`
}

// DeletePetClientRequest combines all parameters for DeletePet
type DeletePetClientRequest struct {

	// petId - Path parameter
	PetId int64 `path:"petId" required:"true"`

	// Authorization - Header parameter
	Authorization Authorization `header:"Authorization" required:"true"`

	// api_key - Header parameter
	ApiKey string `header:"api_key"`
}

// GetPetByIdClientRequest combines all parameters for GetPetById
type GetPetByIdClientRequest struct {

	// petId - Path parameter
	PetId int64 `path:"petId" required:"true"`

	// Authorization - Header parameter
	Authorization Authorization `header:"Authorization" required:"true"`
}

// UpdatePetWithFormClientRequest combines all parameters for UpdatePetWithForm
type UpdatePetWithFormClientRequest struct {

	// petId - Path parameter
	PetId int64 `path:"petId" required:"true"`

	// name - Query parameter
	Name string `query:"name"`

	// status - Query parameter
	Status string `query:"status"`

	// Authorization - Header parameter
	Authorization Authorization `header:"Authorization" required:"true"`
}

// UpdatePetClientRequest combines all parameters for UpdatePet
type UpdatePetClientRequest struct {

	// petId - Path parameter
	PetId int64 `path:"petId" required:"true"`

	// Authorization - Header parameter
	Authorization Authorization `header:"Authorization" required:"true"`

	Body Pet
}

// UploadFileClientRequest combines all parameters for UploadFile
type UploadFileClientRequest struct {

	// petId - Path parameter
	PetId int64 `path:"petId" required:"true"`

	// additionalMetadata - Query parameter
	AdditionalMetadata string `query:"additionalMetadata"`

	// Authorization - Header parameter
	Authorization Authorization `header:"Authorization" required:"true"`
}

type GetInventoryClientRequest struct {
}

// PlaceOrderClientRequest combines all parameters for PlaceOrder
type PlaceOrderClientRequest struct {

	// Authorization - Header parameter
	Authorization Authorization `header:"Authorization" required:"true"`

	Body Order
}

// DeleteOrderClientRequest combines all parameters for DeleteOrder
type DeleteOrderClientRequest struct {

	// orderId - Path parameter
	OrderId int64 `path:"orderId" required:"true"`

	// Authorization - Header parameter
	Authorization Authorization `header:"Authorization" required:"true"`
}

// GetOrderByIdClientRequest combines all parameters for GetOrderById
type GetOrderByIdClientRequest struct {

	// orderId - Path parameter
	OrderId int64 `path:"orderId" required:"true"`

	// Authorization - Header parameter
	Authorization Authorization `header:"Authorization" required:"true"`
}

type CreateUserClientRequest struct {
	Body User
}

// CreateUsersWithListInputClientRequest combines all parameters for CreateUsersWithListInput
type CreateUsersWithListInputClientRequest struct {

	// Authorization - Header parameter
	Authorization Authorization `header:"Authorization" required:"true"`

	Body CreateUsersWithListInputJSONBody
}

// LogoutUserClientRequest combines all parameters for LogoutUser
type LogoutUserClientRequest struct {

	// Authorization - Header parameter
	Authorization Authorization `header:"Authorization" required:"true"`
}

// DeleteUserClientRequest combines all parameters for DeleteUser
type DeleteUserClientRequest struct {

	// username - Path parameter
	Username string `path:"username" required:"true"`

	// Authorization - Header parameter
	Authorization Authorization `header:"Authorization" required:"true"`
}

// GetUserByNameClientRequest combines all parameters for GetUserByName
type GetUserByNameClientRequest struct {

	// username - Path parameter
	Username string `path:"username" required:"true"`

	// Authorization - Header parameter
	Authorization Authorization `header:"Authorization" required:"true"`
}

// UpdateUserClientRequest combines all parameters for UpdateUser
type UpdateUserClientRequest struct {

	// username - Path parameter
	Username string `path:"username" required:"true"`

	// Authorization - Header parameter
	Authorization Authorization `header:"Authorization" required:"true"`

	Body User
}

type ApiRequestService[T apicontext.Principal] interface {
	PostLogin(request PostLoginClientRequest, ctx *apicontext.Request[T])

	FindAllPets(request FindAllPetsClientRequest, ctx *apicontext.Request[T])

	AddPet(request AddPetClientRequest, ctx *apicontext.Request[T])

	FindPetsByStatus(request FindPetsByStatusClientRequest, ctx *apicontext.Request[T])

	FindPetsByTags(request FindPetsByTagsClientRequest, ctx *apicontext.Request[T])

	DeletePet(request DeletePetClientRequest, ctx *apicontext.Request[T])

	GetPetById(request GetPetByIdClientRequest, ctx *apicontext.Request[T])

	UpdatePetWithForm(request UpdatePetWithFormClientRequest, ctx *apicontext.Request[T])

	UpdatePet(request UpdatePetClientRequest, ctx *apicontext.Request[T])

	UploadFile(request UploadFileClientRequest, ctx *apicontext.Request[T])

	GetInventory(ctx *apicontext.Request[T])

	PlaceOrder(request PlaceOrderClientRequest, ctx *apicontext.Request[T])

	DeleteOrder(request DeleteOrderClientRequest, ctx *apicontext.Request[T])

	GetOrderById(request GetOrderByIdClientRequest, ctx *apicontext.Request[T])

	CreateUser(request CreateUserClientRequest, ctx *apicontext.Request[T])

	CreateUsersWithListInput(request CreateUsersWithListInputClientRequest, ctx *apicontext.Request[T])

	LogoutUser(request LogoutUserClientRequest, ctx *apicontext.Request[T])

	DeleteUser(request DeleteUserClientRequest, ctx *apicontext.Request[T])

	GetUserByName(request GetUserByNameClientRequest, ctx *apicontext.Request[T])

	UpdateUser(request UpdateUserClientRequest, ctx *apicontext.Request[T])
}

type resourceHandlerImpl[T apicontext.Principal] struct {
	Service ApiRequestService[T]
}

// apiResourceHandler registers API endpoints from generated code.

func apiResourceHandler[T apicontext.Principal](server server.Api[T], service ApiRequestService[T]) {
	handler := &resourceHandlerImpl[T]{
		Service: service,
	}
	apiResourceRegister(server, handler)
}

func apiResourceRegister[T apicontext.Principal](server server.Api[T], handler resourceHandler[T]) {
	// Initialize an empty string for the merged scopes.
	server.PublicRouter(handler.PostLogin, "/login", "POST")

	// Initialize an empty string for the merged scopes.// Initialize $scopes if it's empty.// Append with a comma if $scopes is not empty.
	server.Add(handler.FindAllPets, "/pet", "GET", []string{"write:pets", "read:pets"}...)

	// Initialize an empty string for the merged scopes.// Initialize $scopes if it's empty.// Append with a comma if $scopes is not empty.
	server.Add(handler.AddPet, "/pet", "POST", []string{"write:pets", "read:pets"}...)

	// Initialize an empty string for the merged scopes.// Initialize $scopes if it's empty.// Append with a comma if $scopes is not empty.
	server.Add(handler.FindPetsByStatus, "/pet/findByStatus", "GET", []string{"write:pets", "read:pets"}...)

	// Initialize an empty string for the merged scopes.// Initialize $scopes if it's empty.// Append with a comma if $scopes is not empty.
	server.Add(handler.FindPetsByTags, "/pet/findByTags", "GET", []string{"write:pets", "read:pets"}...)

	// Initialize an empty string for the merged scopes.// Initialize $scopes if it's empty.// Append with a comma if $scopes is not empty.
	server.Add(handler.DeletePet, "/pet/{petId}", "DELETE", []string{"write:pets", "read:pets"}...)

	// Initialize an empty string for the merged scopes.// Initialize $scopes if it's empty.// Append with a comma if $scopes is not empty.// Append with a comma if $scopes is not empty.
	server.Add(handler.GetPetById, "/pet/{petId}", "GET", []string{"api_key", "write:pets", "read:pets"}...)

	// Initialize an empty string for the merged scopes.// Initialize $scopes if it's empty.// Append with a comma if $scopes is not empty.
	server.Add(handler.UpdatePetWithForm, "/pet/{petId}", "POST", []string{"write:pets", "read:pets"}...)

	// Initialize an empty string for the merged scopes.// Initialize $scopes if it's empty.// Append with a comma if $scopes is not empty.
	server.Add(handler.UpdatePet, "/pet/{petId}", "PUT", []string{"write:pets", "read:pets"}...)

	// Initialize an empty string for the merged scopes.// Initialize $scopes if it's empty.// Append with a comma if $scopes is not empty.
	server.Add(handler.UploadFile, "/pet/{petId}/uploadImage", "POST", []string{"write:pets", "read:pets"}...)

	// Initialize an empty string for the merged scopes.
	server.PublicRouter(handler.GetInventory, "/store/inventory", "GET")

	// Initialize an empty string for the merged scopes.
	server.PublicRouter(handler.PlaceOrder, "/store/order", "POST")

	// Initialize an empty string for the merged scopes.
	server.PublicRouter(handler.DeleteOrder, "/store/order/{orderId}", "DELETE")

	// Initialize an empty string for the merged scopes.
	server.PublicRouter(handler.GetOrderById, "/store/order/{orderId}", "GET")

	// Initialize an empty string for the merged scopes.
	server.PublicRouter(handler.CreateUser, "/user", "POST")

	// Initialize an empty string for the merged scopes.
	server.PublicRouter(handler.CreateUsersWithListInput, "/user/createWithList", "POST")

	// Initialize an empty string for the merged scopes.
	server.PublicRouter(handler.LogoutUser, "/user/logout", "GET")

	// Initialize an empty string for the merged scopes.
	server.PublicRouter(handler.DeleteUser, "/user/{username}", "DELETE")

	// Initialize an empty string for the merged scopes.
	server.PublicRouter(handler.GetUserByName, "/user/{username}", "GET")

	// Initialize an empty string for the merged scopes.
	server.PublicRouter(handler.UpdateUser, "/user/{username}", "PUT")

}

func Api[T apicontext.Principal](service ApiRequestService[T]) func(handler server.Api[T]) {
	return func(handler server.Api[T]) {
		apiResourceHandler(handler, service)
	}
}
