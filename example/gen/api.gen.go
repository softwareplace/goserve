// Package gen provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.16.3 DO NOT EDIT.
package gen

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gorilla/mux"
)

const (
	ApiSecretKeyScopes = "ApiSecretKey.Scopes"
	BearerAuthScopes   = "BearerAuth.Scopes"
	OAuth2Scopes       = "OAuth2.Scopes"
)

// BaseResponse defines model for BaseResponse.
type BaseResponse struct {
	Code      *int    `json:"code,omitempty"`
	Message   *string `json:"message,omitempty"`
	Success   *bool   `json:"success,omitempty"`
	Timestamp *int    `json:"timestamp,omitempty"`
}

// LoginRequest defines model for LoginRequest.
type LoginRequest struct {
	Password string `json:"password"`
	Username string `json:"username"`
}

// LoginResponse defines model for LoginResponse.
type LoginResponse struct {
	Expires *int    `json:"expires,omitempty"`
	Token   *string `json:"token,omitempty"`
}

// PostLoginJSONRequestBody defines body for PostLogin for application/json ContentType.
type PostLoginJSONRequestBody = LoginRequest

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Public endpoint
	// (GET /doc/v1)
	GetDocV1(w http.ResponseWriter, r *http.Request)
	// Authentication endpoint
	// (POST /login)
	PostLogin(w http.ResponseWriter, r *http.Request)
	// Public endpoint
	// (GET /test)
	GetTest(w http.ResponseWriter, r *http.Request)
	// Secured endpoint
	// (GET /test/v2)
	GetTestV2(w http.ResponseWriter, r *http.Request)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// GetDocV1 operation middleware
func (siw *ServerInterfaceWrapper) GetDocV1(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, ApiSecretKeyScopes, []string{})

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	ctx = context.WithValue(ctx, OAuth2Scopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetDocV1(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PostLogin operation middleware
func (siw *ServerInterfaceWrapper) PostLogin(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, ApiSecretKeyScopes, []string{})

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	ctx = context.WithValue(ctx, OAuth2Scopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostLogin(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetTest operation middleware
func (siw *ServerInterfaceWrapper) GetTest(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, ApiSecretKeyScopes, []string{})

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	ctx = context.WithValue(ctx, OAuth2Scopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetTest(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetTestV2 operation middleware
func (siw *ServerInterfaceWrapper) GetTestV2(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, OAuth2Scopes, []string{"api:example:admin"})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetTestV2(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, GorillaServerOptions{})
}

type GorillaServerOptions struct {
	BaseURL          string
	BaseRouter       *mux.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r *mux.Router) http.Handler {
	return HandlerWithOptions(si, GorillaServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r *mux.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, GorillaServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options GorillaServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = mux.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.HandleFunc(options.BaseURL+"/doc/v1", wrapper.GetDocV1).Methods("GET")

	r.HandleFunc(options.BaseURL+"/login", wrapper.PostLogin).Methods("POST")

	r.HandleFunc(options.BaseURL+"/test", wrapper.GetTest).Methods("GET")

	r.HandleFunc(options.BaseURL+"/test/v2", wrapper.GetTestV2).Methods("GET")

	return r
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/9xW247bNhD9FWJaoC9aS/a2SKo3b5OmblLUWDtpi4WBcKmxzUQiGXLkjbvQvxdDqb5q",
	"gxQJGrRvEjk3zjlzuQdlK2cNGgqQ30NQa6xk/LySAa8xOGsC8r/z1qEnjfFW2SKe0tYh5KAN4Qo9NAlU",
	"GIJcHV4G8tqs+C7USmEIB3e31pYoDV+SrjCQrFyfXb5vj+ztG1TECi/sSptrfFdjoPMInQzhzvqiN5A6",
	"oDey6ouyScDju1p7LCC/2Usme4uLh4N5KF/43mn/96esXImQf59lSU8Cyb5F0x/YiVfOKKraa9rOGLjW",
	"/tjpGSqP9By3/K8N5LBGWaCHBNpXw+8X4+nk4vnTP2BnVTrNGk0CVyg9+nFNa9a/jX8/Wl9Jghx+/m0O",
	"SUuUCGC83VtZEzm28Surj1h/Wdq7M0SCsq4NVzqddynJZVHFaMeRJoIwULoZCY/B1l7hLjsvfdm5ytN0",
	"+Gg0GD4aZINh/jh7nB0lSsYgGj7SZmnZX4FBee1IW/b0tPUsxtOJ8LUx2qzEnaa1kELVgWwlnlmvy1KK",
	"X+r3QrNshYYkqw/41ZoYSvhpPp9evJxPXszEhfjhXHM8nUACG/Sh9TscZIOM32MdGuk05HA5yAaXkWa0",
	"jplJC6vSzZA/V0jnsc8xkNBLQWsUrr4ttRLe1oRCB3Fn/VttVhwi0zDGOykgh2dIT6x6NQSmecvW6GyU",
	"ZW1dG0JDLTCu1Cpqpm+CNfv+cEDOHRWb5CS6WVfrTQLf/UPbX3tcQg5fpfvmlHadKT1qSz1uJ4a4YEsR",
	"0G/QC/Tetv0j1FUl/RZymLbJQlM4qw0xjHIVuNqfWAULFk5LrufIWht6cs/sRkP8BhRScJcQ0hSizWnR",
	"ccgI2TGZWXsOxtQGio0D2qaDga5ssf1syTrqkM1xayNfY/OJJPgI3w8jFQVENxKWdclM+TYb/otM2chS",
	"F0J5LBhKWYYTnhyArK3p4wtLWK//jAIdc6gbR5+1ZlnvU0v2eCIdzOndRIIJfbOLY9/TPzCB/h9lH7O7",
	"Ry/djD4KwDh8sThHUFy3ZRaimLclitdnc+71g0C/Gv3XoP7idcshXH751tFtY5Df3O82oJueFWfRLA6Z",
	"OeuI9AFqnlo/3vJuFk1yf7S3tSe7GFqHsTZC1D/txUqWosANltbxgtPVESRQH+5aJcutbaC4aqXSubR7",
	"WLoZptAsmr8CAAD//x9PmJxSDAAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
