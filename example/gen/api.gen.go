// Package gen provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.16.3 DO NOT EDIT.
package gen

import (
	"github.com/softwareplace/http-utils/api_context"
	"github.com/softwareplace/http-utils/server"
)

const (
	OAuth2Scopes = "OAuth2.Scopes"
)

// BaseResponse defines model for BaseResponse.
type BaseResponse struct {
	Code      *int    `json:"code,omitempty"`
	Message   *string `json:"message,omitempty"`
	Success   *bool   `json:"success,omitempty"`
	Timestamp *int    `json:"timestamp,omitempty"`
}

// LoginRequest defines model for LoginRequest.
type LoginRequest struct {
	Password string `json:"password"`
	Username string `json:"username"`
}

// LoginResponse defines model for LoginResponse.
type LoginResponse struct {
	Expires *int    `json:"expires,omitempty"`
	Token   *string `json:"token,omitempty"`
}

// PostTestRequest defines model for PostTestRequest.
type PostTestRequest struct {
	Code    int    `json:"code"`
	Message string `json:"message"`
	Success bool   `json:"success"`
}

// Authorization defines model for authorization.
type Authorization = string

// Ref defines model for ref.
type Ref = string

// Version defines model for version.
type Version = string

type PostLoginRequestParams struct {
}

func (rh *requestHandlerImpl[T]) PostLogin(ctx *api_context.ApiRequestContext[T]) {

	requestBody := LoginRequest{}
	server.GetRequestBody(ctx, requestBody, func(ctx *api_context.ApiRequestContext[T], body LoginRequest) {
		//request := PostLoginRequestParams{}
		//server.PopulateFieldsFromRequest(ctx, &request)
		//rh.Service.PostLoginRequest(body, request, ctx)
		rh.Service.PostLoginRequest(body, ctx)
	}, func(ctx *api_context.ApiRequestContext[T], err error) {
		ctx.InternalServerError("Internal server error")
	})

}

type GetTestRequestParams struct {
}

func (rh *requestHandlerImpl[T]) GetTest(ctx *api_context.ApiRequestContext[T]) {
	//request := GetTestRequestParams{}
	// server.PopulateFieldsFromRequest(ctx, &request)
	rh.Service.GetTestRequest(ctx)

}

type GetTestVersionRequestParams struct {
	// Ref Any data
	Ref Ref `form:"ref" json:"ref"`

	// Authorization jwt
	Authorization Authorization `json:"Authorization"`
}

func (rh *requestHandlerImpl[T]) GetTestVersion(ctx *api_context.ApiRequestContext[T]) {
	//request := GetTestVersionRequestParams{}
	// server.PopulateFieldsFromRequest(ctx, &request)
	rh.Service.GetTestVersionRequest(ctx)

}

type PostTestVersionRequestParams struct {
	// Ref Any data
	Ref Ref `form:"ref" json:"ref"`

	// Authorization jwt
	Authorization Authorization `json:"Authorization"`
}

func (rh *requestHandlerImpl[T]) PostTestVersion(ctx *api_context.ApiRequestContext[T]) {

	requestBody := PostTestRequest{}
	server.GetRequestBody(ctx, requestBody, func(ctx *api_context.ApiRequestContext[T], body PostTestRequest) {
		//request := PostTestVersionRequestParams{}
		//server.PopulateFieldsFromRequest(ctx, &request)
		//rh.Service.PostTestVersionRequest(body, request, ctx)
		rh.Service.PostTestVersionRequest(body, ctx)
	}, func(ctx *api_context.ApiRequestContext[T], err error) {
		ctx.InternalServerError("Internal server error")
	})

}

// PostLoginJSONRequestBody defines body for PostLogin for application/json ContentType.
type PostLoginRequest = struct {
	Body LoginRequest
}

// PostTestVersionJSONRequestBody defines body for PostTestVersion for application/json ContentType.
type PostTestVersionRequest = struct {
	Body PostTestRequest
}

// RequestHandler represents all server handlers represents all server handlers..
type RequestHandler[T api_context.ApiPrincipalContext] interface {
	// Authentication endpoint
	// (POST /login)
	PostLogin(ctx *api_context.ApiRequestContext[T])
	// Public endpoint
	// (GET /test)
	GetTest(ctx *api_context.ApiRequestContext[T])
	// Secured endpoint
	// (GET /test/{version})
	GetTestVersion(ctx *api_context.ApiRequestContext[T])
	// Secured endpoint
	// (POST /test/{version})
	PostTestVersion(ctx *api_context.ApiRequestContext[T])
}

type ServiceRequestHandler[T api_context.ApiPrincipalContext] interface {

	//PostLoginRequest(requestBody LoginRequest, requestParams PostLoginRequestParams,ctx *api_context.ApiRequestContext[T])
	PostLoginRequest(requestBody LoginRequest, ctx *api_context.ApiRequestContext[T])

	GetTestRequest(ctx *api_context.ApiRequestContext[T])

	GetTestVersionRequest(ctx *api_context.ApiRequestContext[T])

	//PostTestVersionRequest(requestBody PostTestRequest, requestParams PostTestVersionRequestParams,ctx *api_context.ApiRequestContext[T])
	PostTestVersionRequest(requestBody PostTestRequest, ctx *api_context.ApiRequestContext[T])
}

type requestHandlerImpl[T api_context.ApiPrincipalContext] struct {
	Service ServiceRequestHandler[T]
}

// ResourcesHandler registers API endpoints from generated code.

// - RequestHandler.PostLogin
// - RequestHandler.GetTest
// - RequestHandler.GetTestVersion
// - RequestHandler.PostTestVersion
// Parameters:
//   - apiServer: The API router handler used for setting up routes and middleware.
//   - server: The server interface implementation containing the endpoint handlers.
//
// Generics:
//   - T: A type that satisfies the api_context.ApiPrincipalContext interface, representing the principal/context
//     involved in the API operations.
//
// This function will use the RequestHandler implementation
// that has already been generated to bind specific API routes
// dynamically at runtime, based on the provided security definitions
// and endpoint configurations.
func ResourcesHandler[T api_context.ApiPrincipalContext](apiServer server.ApiRouterHandler[T], service ServiceRequestHandler[T]) {
	handler := &requestHandlerImpl[T]{
		Service: service,
	}
	ApiResourceRegister(apiServer, handler)
}

// ApiResourceRegister is a customizable resource handler that registers API endpoints from generated code.
// This method binds the custom `RequestHandler` implementation to specific API routes,
// allowing dynamic configuration of handlers.
//
// Parameters:
//   - apiServer: The API router handler used for setting up routes and middleware.
//   - handler: The `RequestHandler` interface implementation containing the actual endpoint handlers.
//
// Generics:
//   - T: A type that satisfies the api_context.ApiPrincipalContext interface, representing the principal/context
//     involved in the API operations.
func ApiResourceRegister[T api_context.ApiPrincipalContext](apiServer server.ApiRouterHandler[T], handler RequestHandler[T]) {

	apiServer.PublicRouter(handler.PostLogin, "/login", "POST")

	apiServer.PublicRouter(handler.GetTest, "/test", "GET")

	apiServer.Add(handler.GetTestVersion, "/test/{version}", "GET", []string{"api:example:admin"}...)

	apiServer.Add(handler.PostTestVersion, "/test/{version}", "POST", []string{"api:example:admin"}...)

}

func ApiResourceHandler[T api_context.ApiPrincipalContext](service ServiceRequestHandler[T]) func(handler server.ApiRouterHandler[T]) {
	return func(handler server.ApiRouterHandler[T]) {
		ResourcesHandler(handler, service)
	}
}
