// Package gen provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.16.3 DO NOT EDIT.
package gen

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/softwareplace/http-utils/api_context"
	"github.com/softwareplace/http-utils/server"
)

const (
	OAuth2Scopes = "OAuth2.Scopes"
)

// BaseResponse defines model for BaseResponse.
type BaseResponse struct {
	Code      *int    `json:"code,omitempty"`
	Message   *string `json:"message,omitempty"`
	Success   *bool   `json:"success,omitempty"`
	Timestamp *int    `json:"timestamp,omitempty"`
}

// LoginRequest defines model for LoginRequest.
type LoginRequest struct {
	Password string `json:"password"`
	Username string `json:"username"`
}

// LoginResponse defines model for LoginResponse.
type LoginResponse struct {
	Expires *int    `json:"expires,omitempty"`
	Token   *string `json:"token,omitempty"`
}

// GetTestV2Params defines parameters for GetTestV2.
type GetTestV2Params struct {
	// Authorization jwt
	Authorization string `json:"Authorization"`
}

// PostLoginJSONRequestBody defines body for PostLogin for application/json ContentType.
type PostLoginJSONRequestBody = LoginRequest

// ServerInterface represents all server handlers represents all server handlers..
type ServerInterface[T api_context.ApiPrincipalContext] interface {
	// Authentication endpoint
	// (POST /login)
	PostLogin(ctx *api_context.ApiRequestContext[T])
	// Public endpoint
	// (GET /test)
	GetTest(ctx *api_context.ApiRequestContext[T])
	// Secured endpoint
	// (GET /test/v2)
	GetTestV2(ctx *api_context.ApiRequestContext[T])
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

//PostLogin operation middleware test execution
//GetTest operation middleware test execution
//GetTestV2 operation middleware test execution

// ResourcesHandler registers API endpoints and sets up the Swagger documentation.
//
// This function takes an instance of `ApiRouterHandler` and `ServerInterface`,
// and configures the following:
// - Sets up Swagger documentation using the provided `GetSwagger` function.
// - PostLogin
// - GetTest
// - GetTestV2
// Parameters:
//   - apiServer: The API router handler used for setting up routes and middleware.
//   - server: The server interface implementation containing the endpoint handlers.
//
// Generics:
//   - T: A type that satisfies the `ApiPrincipalContext` interface, representing the principal/context
//     involved in the API operations.
func ResourcesHandler[T api_context.ApiPrincipalContext](apiServer server.ApiRouterHandler[T], server ServerInterface[T]) {
	apiServer.SetupSwagger(GetSwagger)

	apiServer.Add(server.PostLogin, "/login", "POST", []string{}...)

	apiServer.Add(server.GetTest, "/test", "GET", []string{}...)

	apiServer.Add(server.GetTestV2, "/test/v2", "GET", []string{"api:example:admin", "api:example:admin:v2"}...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/9RW71PbOBD9VzS6m7kvJnbCjxZ/CxQ4BwIhCdBeh7kq9iZRsCVVkmNCJ//7zcouSYjp",
	"3cwx0+k3W9Jqn97bfdI3GstMSQHCGhp+oyaeQsbc5xEz0AejpDCA/0pLBdpycLOxTNyoXSigIeXCwgQ0",
	"XXo0A2PYZH3SWM3FBOdMHsdgzNrcSMoUmMBJyzMwlmWqbl+cL4fkaAaxxYALOeGiD19zMHYboWLGFFIn",
	"tUByA1qwrA7l0qMavuZcQ0LDz6uV3mrH+9fBvMYXPCquv3+yTKVAw8Mg8GoItPIBRD2wF1mRUYhzze1i",
	"gMKV+7cVH0CswZ7DAv+5oCGdAktAU4+Wp6Yfd9q9aOf85BN93pUpjhFLjx4B06DbuZ1i/Mj9nUqdMUtD",
	"2rkbUq8sFCegm13tMrVW4R5XGN7C+HEqiy1FTCxVCZcpHlaUhCzJHNq2KxNiwVh/3iIajMx1DM/s3Oi0",
	"ShX6fvNdq9F81wgazfB98D7YIIo5EEsc4mIsMV8CJtZcWS4x00mZmbR7EdG5EFxMSMHtlDAS58bKjJxJ",
	"zdOUkW7+SDiuzUBYhuENPDW3KCX9czjs7dwMo4sB2SHH25HtXkQ9OgdtyrzNRtAI8DxSgWCK05DuNoLG",
	"riszO3XM+CnWlGNOlhW+iR0ZBmF5zCwQRrBSCRMJ0qWkSKpzCMIqNpE5xIx16Q4QJTSkPWmsK15aFj4Y",
	"eySTRdnkwoKwpUoqxURcCn9mpFiZBX79rmFMQ/qbv3ITv7ISf6NLl5vtZXUObqBsG3fqVhC8de6qKV3y",
	"TQrdAlLZ0jhPUZG9oPlmADZMtCZ/JOYs5QmJNSQoJUtN2dZ5ljG92BSZS0FAJEpyYbH02MSgQ+EKqfmT",
	"W0DvMdy3lSVOoKZuhmAs4WNip0BUPkp5TLTMLRBuSCH1AxeT7TI5A4tx9H+qtemKa3fFsyvSyP7xjGPl",
	"Kz9wwS1WB9U1s/To/htW07+LafGuSIkBPQdNQGupX8jZK/mukdGxu1LPn7f+k4DuAoBkW0HSL9vMuGVa",
	"pkC+bHntl1eFvm05K9IsAwsaEb5EMSsQfu3tslmSLzveW+N7JTssOtPRWcyveCe6eYqalzwykejvx8fR",
	"QfSgPt4edw4bsOg8JXcRv+LRY3fWDS6Hn3avPjwUES/4KDu1fw3c4jk725v0zw5THGd3p0E0k4+Xw5NW",
	"d9bd736IFuPrxmCcnj8W/c6gC+fnp63r4d64UF3ojHcPelcPB4vO7d8suTam2I9rqvD+F+uDn25qCGH3",
	"5/tq9Vxy5fz9ifK55g3ibY+F8xa9R+FX3Tyomu8H7fxq0nIr5xR13XUhY5aSBOaQSoVPjspVqEfz9ddP",
	"iuum0lj3+PGZ4n6F2p83fbq8X/4TAAD///b4p2HkCwAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
